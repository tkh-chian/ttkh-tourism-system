const mysql = require('mysql2/promise');
const fs = require('fs').promises;
const path = require('path');
const axios = require('axios');

const BASE_URL = 'http://localhost:3001';
const dbConfig = {
  host: 'localhost',
  user: 'root',
  password: 'Lhjr@170103',
  database: 'ttkh_tourism'
};

async function fixDatabaseFieldsAndApi() {
  console.log('üîß ‰øÆÂ§çÊï∞ÊçÆÂ∫ìÂ≠óÊÆµÂíåAPIÊü•ËØ¢ÈÄªËæë...');
  
  let connection;
  try {
    connection = await mysql.createConnection(dbConfig);
    console.log('‚úÖ Êï∞ÊçÆÂ∫ìËøûÊé•ÊàêÂäü');
    
    // 1. ‰øÆÂ§çÊï∞ÊçÆÂ∫ìÂ≠óÊÆµÂëΩÂêç‰∏ç‰∏ÄËá¥ÈóÆÈ¢ò
    await fixDatabaseFieldNames(connection);
    
    // 2. ‰øÆÂ§çÂêéÁ´ØAPIÊü•ËØ¢ÈÄªËæë
    await fixBackendApiLogic();
    
    // 3. È™åËØÅ‰øÆÂ§çÁªìÊûú
    await verifyFixes(connection);
    
  } catch (error) {
    console.error('‚ùå ‰øÆÂ§çÂ§±Ë¥•:', error.message);
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

async function fixDatabaseFieldNames(connection) {
  console.log('\n1Ô∏è‚É£ ‰øÆÂ§çÊï∞ÊçÆÂ∫ìÂ≠óÊÆµÂëΩÂêç‰∏ç‰∏ÄËá¥ÈóÆÈ¢ò...');
  
  // Ê£ÄÊü•usersË°®Â≠óÊÆµ
  console.log('\nÊ£ÄÊü•usersË°®Â≠óÊÆµ...');
  const [usersColumns] = await connection.execute(`
    SHOW COLUMNS FROM users
  `);
  
  console.log('usersË°®ÁªìÊûÑ:');
  usersColumns.forEach(col => {
    console.log(`  ${col.Field}: ${col.Type} ${col.Null === 'YES' ? '(ÂèØ‰∏∫Á©∫)' : '(ÈùûÁ©∫)'}`);
  });
  
  // Ê£ÄÊü•ÊòØÂê¶Êúâcreated_atÂíåupdated_atÂ≠óÊÆµ
  const hasCreatedAt = usersColumns.some(col => col.Field === 'created_at');
  const hasUpdatedAt = usersColumns.some(col => col.Field === 'updated_at');
  const hasCreatedAt2 = usersColumns.some(col => col.Field === 'createdAt');
  const hasUpdatedAt2 = usersColumns.some(col => col.Field === 'updatedAt');
  
  // Ê∑ªÂä†Áº∫Â§±ÁöÑÂ≠óÊÆµ
  if (!hasCreatedAt && !hasCreatedAt2) {
    await connection.execute(`
      ALTER TABLE users 
      ADD COLUMN created_at DATETIME DEFAULT NULL
    `);
    console.log('‚úÖ Ê∑ªÂä†‰∫ÜusersË°®ÁöÑcreated_atÂ≠óÊÆµ');
  } else if (!hasCreatedAt && hasCreatedAt2) {
    await connection.execute(`
      ALTER TABLE users 
      ADD COLUMN created_at DATETIME DEFAULT NULL
    `);
    console.log('‚úÖ Ê∑ªÂä†‰∫ÜusersË°®ÁöÑcreated_atÂ≠óÊÆµ');
    
    // Â∞ÜcreatedAtÁöÑÂÄºÂ§çÂà∂Âà∞created_at
    await connection.execute(`
      UPDATE users 
      SET created_at = createdAt 
      WHERE created_at IS NULL AND createdAt IS NOT NULL
    `);
    console.log('‚úÖ Â∞ÜcreatedAtÁöÑÂÄºÂ§çÂà∂Âà∞created_at');
  }
  
  if (!hasUpdatedAt && !hasUpdatedAt2) {
    await connection.execute(`
      ALTER TABLE users 
      ADD COLUMN updated_at DATETIME DEFAULT NULL
    `);
    console.log('‚úÖ Ê∑ªÂä†‰∫ÜusersË°®ÁöÑupdated_atÂ≠óÊÆµ');
  } else if (!hasUpdatedAt && hasUpdatedAt2) {
    await connection.execute(`
      ALTER TABLE users 
      ADD COLUMN updated_at DATETIME DEFAULT NULL
    `);
    console.log('‚úÖ Ê∑ªÂä†‰∫ÜusersË°®ÁöÑupdated_atÂ≠óÊÆµ');
    
    // Â∞ÜupdatedAtÁöÑÂÄºÂ§çÂà∂Âà∞updated_at
    await connection.execute(`
      UPDATE users 
      SET updated_at = updatedAt 
      WHERE updated_at IS NULL AND updatedAt IS NOT NULL
    `);
    console.log('‚úÖ Â∞ÜupdatedAtÁöÑÂÄºÂ§çÂà∂Âà∞updated_at');
  }
  
  // Ê£ÄÊü•ordersË°®Â≠óÊÆµ
  console.log('\nÊ£ÄÊü•ordersË°®Â≠óÊÆµ...');
  const [ordersColumns] = await connection.execute(`
    SHOW COLUMNS FROM orders
  `);
  
  console.log('ordersË°®ÁªìÊûÑ:');
  ordersColumns.forEach(col => {
    console.log(`  ${col.Field}: ${col.Type} ${col.Null === 'YES' ? '(ÂèØ‰∏∫Á©∫)' : '(ÈùûÁ©∫)'}`);
  });
  
  // Á°Æ‰øùÊâÄÊúâËÆ¢ÂçïÈÉΩÊúâcustomer_id
  console.log('\n‰øÆÂ§çËÆ¢ÂçïÂÆ¢Êà∑ÂÖ≥ËÅîÈóÆÈ¢ò...');
  
  // Êü•ÊâæÊú™ÂÖ≥ËÅîÂÆ¢Êà∑ÁöÑËÆ¢Âçï
  const [unlinkedOrders] = await connection.execute(`
    SELECT o.id, o.customer_name, o.customer_email
    FROM orders o
    LEFT JOIN users u ON o.customer_id = u.id
    WHERE o.customer_id IS NULL OR u.id IS NULL
  `);
  
  if (unlinkedOrders.length > 0) {
    console.log(`\nÂèëÁé∞ ${unlinkedOrders.length} ‰∏™Êú™ÂÖ≥ËÅîÂà∞ÂÆ¢Êà∑ÁöÑËÆ¢Âçï:`);
    
    for (const order of unlinkedOrders) {
      console.log(`  Â§ÑÁêÜËÆ¢Âçï: ${order.id}, ÂÆ¢Êà∑: ${order.customer_name}, ÈÇÆÁÆ±: ${order.customer_email || 'Êó†ÈÇÆÁÆ±'}`);
      
      // Â¶ÇÊûúÊ≤°ÊúâÈÇÆÁÆ±ÔºåÁîüÊàê‰∏Ä‰∏™‰∏¥Êó∂ÈÇÆÁÆ±
      const email = order.customer_email || `temp_${order.id.substring(0, 8)}@example.com`;
      
      // Ê£ÄÊü•ÊòØÂê¶Â≠òÂú®ÂåπÈÖçÁöÑÁî®Êà∑
      const [existingUsers] = await connection.execute(`
        SELECT id FROM users WHERE email = ?
      `, [email]);
      
      let customerId;
      
      if (existingUsers.length > 0) {
        customerId = existingUsers[0].id;
        console.log(`  ‚úÖ ÊâæÂà∞ÂåπÈÖçÁöÑÂÆ¢Êà∑ID: ${customerId}`);
      } else {
        // ÂàõÂª∫Êñ∞ÂÆ¢Êà∑
        const { v4: uuidv4 } = require('uuid');
        customerId = uuidv4();
        
        try {
          await connection.execute(`
            INSERT INTO users (
              id, name, email, password, role, status, created_at, updated_at, createdAt, updatedAt
            ) VALUES (
              ?, ?, ?, ?, 'customer', 'active', NOW(), NOW(), NOW(), NOW()
            )
          `, [customerId, order.customer_name || 'Guest', email, '$2a$10$CwTycUXWue0Thq9StjUM0uQxTmrjFPTR.eOUQ/d/LviAzLXpIpQXS']);
          
          console.log(`  ‚úÖ ÂàõÂª∫Êñ∞ÂÆ¢Êà∑ID: ${customerId}`);
        } catch (error) {
          console.log(`  ‚ùå ÂàõÂª∫ÂÆ¢Êà∑Â§±Ë¥•: ${error.message}`);
          
          // Â∞ùËØï‰ΩøÁî®‰∏çÂêåÁöÑÂ≠óÊÆµÁªÑÂêà
          try {
            await connection.execute(`
              INSERT INTO users (
                id, name, email, password, role, status
              ) VALUES (
                ?, ?, ?, ?, 'customer', 'active'
              )
            `, [customerId, order.customer_name || 'Guest', email, '$2a$10$CwTycUXWue0Thq9StjUM0uQxTmrjFPTR.eOUQ/d/LviAzLXpIpQXS']);
            
            console.log(`  ‚úÖ ‰ΩøÁî®ÁÆÄÂåñÂ≠óÊÆµÂàõÂª∫Êñ∞ÂÆ¢Êà∑ID: ${customerId}`);
          } catch (error2) {
            console.log(`  ‚ùå ÁÆÄÂåñÂàõÂª∫‰πüÂ§±Ë¥•: ${error2.message}`);
            continue; // Ë∑≥ËøáËøô‰∏™ËÆ¢Âçï
          }
        }
      }
      
      // Êõ¥Êñ∞ËÆ¢ÂçïÂÖ≥ËÅî
      try {
        await connection.execute(`
          UPDATE orders SET customer_id = ? WHERE id = ?
        `, [customerId, order.id]);
        
        console.log(`  ‚úÖ Â∑≤Êõ¥Êñ∞ËÆ¢Âçï${order.id}ÁöÑÂÆ¢Êà∑ID‰∏∫${customerId}`);
      } catch (error) {
        console.log(`  ‚ùå Êõ¥Êñ∞ËÆ¢ÂçïÂ§±Ë¥•: ${error.message}`);
      }
    }
  } else {
    console.log('‚úÖ ÊâÄÊúâËÆ¢ÂçïÈÉΩÂ∑≤ÂÖ≥ËÅîÂà∞ÂÆ¢Êà∑');
  }
  
  // ‰øÆÂ§çËÆ¢ÂçïÊó•ÊúüÊ†ºÂºèÈóÆÈ¢ò
  console.log('\n‰øÆÂ§çËÆ¢ÂçïÊó•ÊúüÊ†ºÂºèÈóÆÈ¢ò...');
  
  try {
    // ‰øÆÂ§çËÆ¢ÂçïÊó•ÊúüÊ†ºÂºè
    await connection.execute(`
      UPDATE orders
      SET travel_date = STR_TO_DATE(DATE_FORMAT(travel_date, '%Y-%m-%d'), '%Y-%m-%d')
      WHERE travel_date IS NOT NULL
    `);
    console.log('‚úÖ Â∑≤‰øÆÂ§çËÆ¢ÂçïÊó•ÊúüÊ†ºÂºè');
  } catch (error) {
    console.log(`‚ùå ‰øÆÂ§çËÆ¢ÂçïÊó•ÊúüÊ†ºÂºèÂ§±Ë¥•: ${error.message}`);
  }
}

async function fixBackendApiLogic() {
  console.log('\n2Ô∏è‚É£ ‰øÆÂ§çÂêéÁ´ØAPIÊü•ËØ¢ÈÄªËæë...');
  
  // ËØªÂèñsimple-server-fixed.jsÊñá‰ª∂
  const serverFilePath = path.join(__dirname, 'backend', 'simple-server-fixed.js');
  let serverCode;
  
  try {
    serverCode = await fs.readFile(serverFilePath, 'utf8');
    console.log('‚úÖ ÊàêÂäüËØªÂèñÂêéÁ´ØÊúçÂä°Âô®‰ª£Á†Å');
  } catch (error) {
    console.error(`‚ùå ËØªÂèñÊúçÂä°Âô®‰ª£Á†ÅÂ§±Ë¥•: ${error.message}`);
    return;
  }
  
  // 1. ‰øÆÂ§ç‰ª∑Ê†ºÊó•ÂéÜÊü•ËØ¢ÈÄªËæë
  console.log('\n‰øÆÂ§ç‰ª∑Ê†ºÊó•ÂéÜÊü•ËØ¢ÈÄªËæë...');
  
  // Êü•Êâæ‰ª∑Ê†ºÊó•ÂéÜÊü•ËØ¢‰ª£Á†Å
  const priceScheduleQueryPattern = /const \[schedules\] = await connection\.execute\(`[\s\S]*?SELECT[\s\S]*?FROM price_schedules[\s\S]*?WHERE[\s\S]*?product_id[\s\S]*?AND[\s\S]*?travel_date/;
  
  if (priceScheduleQueryPattern.test(serverCode)) {
    // ÊõøÊç¢Êü•ËØ¢ÈÄªËæë
    serverCode = serverCode.replace(priceScheduleQueryPattern, (match) => {
      return match.replace(/AND (DATE\(travel_date\) = \?|travel_date = \?|DATE\(travel_date\) = DATE\(\?\))/, 
                         `AND DATE_FORMAT(travel_date, '%Y-%m-%d') = ?`);
    });
    console.log('‚úÖ ÊàêÂäü‰øÆÂ§ç‰ª∑Ê†ºÊó•ÂéÜÊü•ËØ¢ÈÄªËæë');
  } else {
    console.log('‚ö†Ô∏è Êú™ÊâæÂà∞‰ª∑Ê†ºÊó•ÂéÜÊü•ËØ¢ÈÄªËæëÔºåÂ∞ùËØïÂÖ∂‰ªñÊ®°Âºè...');
    
    // Â∞ùËØïÂÖ∂‰ªñÂèØËÉΩÁöÑÊ®°Âºè
    const alternativePatterns = [
      /SELECT[\s\S]*?FROM price_schedules[\s\S]*?WHERE[\s\S]*?product_id[\s\S]*?AND[\s\S]*?travel_date/,
      /connection\.execute\(`[\s\S]*?SELECT[\s\S]*?FROM price_schedules[\s\S]*?WHERE[\s\S]*?product_id/
    ];
    
    let found = false;
    for (const pattern of alternativePatterns) {
      if (pattern.test(serverCode)) {
        serverCode = serverCode.replace(pattern, (match) => {
          if (match.includes('travel_date')) {
            return match.replace(/AND (DATE\(travel_date\) = \?|travel_date = \?|DATE\(travel_date\) = DATE\(\?\))/, 
                               `AND DATE_FORMAT(travel_date, '%Y-%m-%d') = ?`);
          }
          return match;
        });
        found = true;
        console.log('‚úÖ ‰ΩøÁî®Êõø‰ª£Ê®°Âºè‰øÆÂ§ç‰ª∑Ê†ºÊó•ÂéÜÊü•ËØ¢ÈÄªËæë');
        break;
      }
    }
    
    if (!found) {
      // Â¶ÇÊûúÊâæ‰∏çÂà∞ÂåπÈÖçÁöÑÊ®°ÂºèÔºåÂ∞ùËØïÁõ¥Êé•Ê∑ªÂä†‰∏Ä‰∏™Êñ∞ÁöÑË∑ØÁî±Â§ÑÁêÜÁ®ãÂ∫è
      if (!serverCode.includes('app.get(\'/api/price-schedules')) {
        const newRouteCode = `
// ‰ª∑Ê†ºÊó•ÂéÜÊü•ËØ¢API - ‰ΩøÁî®DATE_FORMATÁ°Æ‰øùÊ≠£Á°ÆÂåπÈÖçÊó•Êúü
app.get('/api/price-schedules', async (req, res) => {
  try {
    const { product_id, travel_date } = req.query;
    
    if (!product_id) {
      return res.status(400).json({ success: false, message: 'Áº∫Â∞ë‰∫ßÂìÅID' });
    }
    
    let query = 'SELECT * FROM price_schedules WHERE product_id = ?';
    let params = [product_id];
    
    if (travel_date) {
      query += ' AND DATE_FORMAT(travel_date, "%Y-%m-%d") = ?';
      params.push(travel_date);
    }
    
    const [schedules] = await connection.execute(query, params);
    
    res.json({ success: true, schedules });
  } catch (error) {
    console.error('Error fetching price schedules:', error);
    res.status(500).json({ success: false, message: error.message });
  }
});`;
        
        // Âú®ÈÄÇÂΩìÁöÑ‰ΩçÁΩÆÊèíÂÖ•Êñ∞Ë∑ØÁî±
        const insertPosition = serverCode.indexOf('app.listen(');
        if (insertPosition !== -1) {
          serverCode = serverCode.slice(0, insertPosition) + newRouteCode + '\n\n' + serverCode.slice(insertPosition);
          console.log('‚úÖ Ê∑ªÂä†‰∫ÜÊñ∞ÁöÑ‰ª∑Ê†ºÊó•ÂéÜÊü•ËØ¢APIË∑ØÁî±');
        }
      }
    }
  }
  
  // 2. ‰øÆÂ§çËÆ¢ÂçïÊü•ËØ¢ÈÄªËæë
  console.log('\n‰øÆÂ§çËÆ¢ÂçïÊü•ËØ¢ÈÄªËæë...');
  
  // Êü•ÊâæËÆ¢ÂçïÂàóË°®API
  const orderListPatterns = [
    /app\.get\(['"]\/api\/orders['"]/,
    /app\.get\(['"]\/api\/merchant\/orders['"]/,
    /app\.get\(['"]\/api\/customer\/orders['"]/
  ];
  
  let orderListFixed = false;
  
  for (const pattern of orderListPatterns) {
    if (pattern.test(serverCode)) {
      // Á°Æ‰øùËÆ¢ÂçïÊü•ËØ¢ÂåÖÂê´Ê≠£Á°ÆÁöÑÂÖ≥ËÅî
      const orderListMatch = serverCode.match(new RegExp(`${pattern.source}[\\s\\S]*?\\{([\\s\\S]*?)\\}\\);`));
      
      if (orderListMatch && orderListMatch[1]) {
        const orderListHandler = orderListMatch[1];
        
        // Ê£ÄÊü•ÊòØÂê¶Áº∫Â∞ëÂÖ≥ËÅîÊü•ËØ¢
        if (!orderListHandler.includes('JOIN') && !orderListHandler.includes('customer_id')) {
          // Âú®Êü•ËØ¢‰∏≠Ê∑ªÂä†customer_idÊù°‰ª∂
          serverCode = serverCode.replace(orderListMatch[0], (match) => {
            return match.replace(/const \[orders\] = await connection\.execute\(`([^`]*)`([\s\S]*?)\)/m, 
                               (sqlMatch, sql, params) => {
              // Ê†πÊçÆAPIË∑ØÂæÑÊ∑ªÂä†‰∏çÂêåÁöÑÊù°‰ª∂
              if (match.includes('/api/customer/orders')) {
                return `const [orders] = await connection.execute(\`${sql} WHERE customer_id = ?\`${params}, req.user.id)`;
              } else if (match.includes('/api/merchant/orders')) {
                return `const [orders] = await connection.execute(\`
                  SELECT o.* 
                  FROM orders o
                  JOIN products p ON o.product_id = p.id
                  WHERE p.merchant_id = ?
                \`, [req.user.id])`;
              } else {
                return sqlMatch; // ‰øùÊåÅÂéüÊ†∑
              }
            });
          });
          
          orderListFixed = true;
          console.log('‚úÖ ÊàêÂäü‰øÆÂ§çËÆ¢ÂçïÂàóË°®Êü•ËØ¢ÈÄªËæë');
        } else {
          console.log('‚úÖ ËÆ¢ÂçïÂàóË°®Êü•ËØ¢ÈÄªËæëÂ∑≤ÂåÖÂê´ÂøÖË¶ÅÁöÑÂÖ≥ËÅî');
        }
      }
    }
  }
  
  if (!orderListFixed) {
    console.log('‚ö†Ô∏è Êú™ÊâæÂà∞ÈúÄË¶Å‰øÆÂ§çÁöÑËÆ¢ÂçïÂàóË°®APIÔºåÂ∞ùËØïÊ∑ªÂä†Êñ∞ÁöÑAPIË∑ØÁî±...');
    
    // Ê∑ªÂä†Êñ∞ÁöÑËÆ¢ÂçïAPIË∑ØÁî±
    const newOrderRoutes = `
// ÂÆ¢Êà∑ËÆ¢ÂçïÂàóË°®API - Á°Æ‰øùÂè™ËøîÂõûÂΩìÂâçÂÆ¢Êà∑ÁöÑËÆ¢Âçï
app.get('/api/customer/orders', authenticateToken, async (req, res) => {
  try {
    const [orders] = await connection.execute(\`
      SELECT * FROM orders WHERE customer_id = ?
    \`, [req.user.id]);
    
    res.json({ success: true, orders });
  } catch (error) {
    console.error('Error fetching customer orders:', error);
    res.status(500).json({ success: false, message: error.message });
  }
});

// ÂïÜÂÆ∂ËÆ¢ÂçïÂàóË°®API - Á°Æ‰øùÂè™ËøîÂõûÂΩìÂâçÂïÜÂÆ∂ÁöÑ‰∫ßÂìÅËÆ¢Âçï
app.get('/api/merchant/orders', authenticateToken, async (req, res) => {
  try {
    const [orders] = await connection.execute(\`
      SELECT o.* 
      FROM orders o
      JOIN products p ON o.product_id = p.id
      WHERE p.merchant_id = ?
    \`, [req.user.id]);
    
    res.json({ success: true, orders });
  } catch (error) {
    console.error('Error fetching merchant orders:', error);
    res.status(500).json({ success: false, message: error.message });
  }
});`;
    
    // Âú®ÈÄÇÂΩìÁöÑ‰ΩçÁΩÆÊèíÂÖ•Êñ∞Ë∑ØÁî±
    const insertPosition = serverCode.indexOf('app.listen(');
    if (insertPosition !== -1) {
      serverCode = serverCode.slice(0, insertPosition) + newOrderRoutes + '\n\n' + serverCode.slice(insertPosition);
      console.log('‚úÖ Ê∑ªÂä†‰∫ÜÊñ∞ÁöÑËÆ¢ÂçïÊü•ËØ¢APIË∑ØÁî±');
    }
  }
  
  // 3. ‰øÆÂ§ç‰∫ßÂìÅÊü•ËØ¢ÈÄªËæë
  console.log('\n‰øÆÂ§ç‰∫ßÂìÅÊü•ËØ¢ÈÄªËæë...');
  
  // Êü•Êâæ‰∫ßÂìÅÂàóË°®API
  const productListPatterns = [
    /app\.get\(['"]\/api\/products['"]/,
    /app\.get\(['"]\/api\/admin\/products['"]/,
    /app\.get\(['"]\/api\/merchant\/products['"]/
  ];
  
  let productListFixed = false;
  
  for (const pattern of productListPatterns) {
    if (pattern.test(serverCode)) {
      // Á°Æ‰øù‰∫ßÂìÅÊü•ËØ¢ÂåÖÂê´Ê≠£Á°ÆÁöÑÊù°‰ª∂
      const productListMatch = serverCode.match(new RegExp(`${pattern.source}[\\s\\S]*?\\{([\\s\\S]*?)\\}\\);`));
      
      if (productListMatch && productListMatch[1]) {
        const productListHandler = productListMatch[1];
        
        // Ê£ÄÊü•ÊòØÂê¶Áº∫Â∞ëÊù°‰ª∂Êü•ËØ¢
        if (pattern.source.includes('admin') && !productListHandler.includes('status')) {
          // Âú®ÁÆ°ÁêÜÂëòAPI‰∏≠Ê∑ªÂä†Áä∂ÊÄÅÊù°‰ª∂
          serverCode = serverCode.replace(productListMatch[0], (match) => {
            if (!match.includes('WHERE status')) {
              return match.replace(/const \[products\] = await connection\.execute\(`([^`]*)`/m, 
                                 `const [products] = await connection.execute(\`$1 WHERE status = 'pending'\``);
            }
            return match;
          });
          
          productListFixed = true;
          console.log('‚úÖ ÊàêÂäü‰øÆÂ§çÁÆ°ÁêÜÂëò‰∫ßÂìÅÂàóË°®Êü•ËØ¢ÈÄªËæë');
        } else if (pattern.source.includes('merchant') && !productListHandler.includes('merchant_id')) {
          // Âú®ÂïÜÂÆ∂API‰∏≠Ê∑ªÂä†ÂïÜÂÆ∂IDÊù°‰ª∂
          serverCode = serverCode.replace(productListMatch[0], (match) => {
            if (!match.includes('WHERE merchant_id')) {
              return match.replace(/const \[products\] = await connection\.execute\(`([^`]*)`/m, 
                                 `const [products] = await connection.execute(\`$1 WHERE merchant_id = ?\`, [req.user.id]`);
            }
            return match;
          });
          
          productListFixed = true;
          console.log('‚úÖ ÊàêÂäü‰øÆÂ§çÂïÜÂÆ∂‰∫ßÂìÅÂàóË°®Êü•ËØ¢ÈÄªËæë');
        }
      }
    }
  }
  
  if (!productListFixed) {
    console.log('‚ö†Ô∏è Êú™ÊâæÂà∞ÈúÄË¶Å‰øÆÂ§çÁöÑ‰∫ßÂìÅÂàóË°®API');
  }
  
  // ‰øùÂ≠ò‰øÆÊîπÂêéÁöÑÊñá‰ª∂
  try {
    await fs.writeFile(serverFilePath, serverCode);
    console.log('‚úÖ Â∑≤‰øùÂ≠ò‰øÆÊîπÂêéÁöÑÂêéÁ´ØÊúçÂä°Âô®‰ª£Á†Å');
  } catch (error) {
    console.error(`‚ùå ‰øùÂ≠òÊúçÂä°Âô®‰ª£Á†ÅÂ§±Ë¥•: ${error.message}`);
  }
}

async function verifyFixes(connection) {
  console.log('\n3Ô∏è‚É£ È™åËØÅ‰øÆÂ§çÁªìÊûú...');
  
  // 1. È™åËØÅ‰ª∑Ê†ºÊó•ÂéÜ‰øÆÂ§ç
  console.log('\nÈ™åËØÅ‰ª∑Ê†ºÊó•ÂéÜ‰øÆÂ§ç...');
  const productId = '23380210-a457-4dd7-aa92-6995ff3c2e2b';
  const testDate = '2025-08-20';
  
  // ‰ΩøÁî®DATE_FORMATÊü•ËØ¢
  const [query1] = await connection.execute(`
    SELECT * FROM price_schedules 
    WHERE product_id = ? AND DATE_FORMAT(travel_date, '%Y-%m-%d') = ?
  `, [productId, testDate]);
  console.log(`DATE_FORMATÊü•ËØ¢: ${query1.length} Êù°ËÆ∞ÂΩï`);
  
  if (query1.length > 0) {
    console.log('‚úÖ ‰ª∑Ê†ºÊó•ÂéÜÊó•ÊúüÊ†ºÂºè‰øÆÂ§çÊàêÂäü');
  } else {
    console.log('‚ùå ‰ª∑Ê†ºÊó•ÂéÜÊó•ÊúüÊ†ºÂºè‰øÆÂ§çÂ§±Ë¥•');
  }
  
  // 2. È™åËØÅËÆ¢ÂçïÂÖ≥ËÅî‰øÆÂ§ç
  console.log('\nÈ™åËØÅËÆ¢ÂçïÂÖ≥ËÅî‰øÆÂ§ç...');
  const [unlinkedOrders] = await connection.execute(`
    SELECT COUNT(*) as count
    FROM orders o
    LEFT JOIN users u ON o.customer_id = u.id
    WHERE o.customer_id IS NULL OR u.id IS NULL
  `);
  
  if (unlinkedOrders[0].count === 0) {
    console.log('‚úÖ ËÆ¢ÂçïÂÆ¢Êà∑ÂÖ≥ËÅî‰øÆÂ§çÊàêÂäü');
  } else {
    console.log(`‚ùå ‰ªçÊúâ ${unlinkedOrders[0].count} ‰∏™ËÆ¢ÂçïÊú™ÂÖ≥ËÅîÂà∞ÊúâÊïàÂÆ¢Êà∑`);
  }
  
  // 3. ÊµãËØïËÆ¢ÂçïÂàõÂª∫API
  console.log('\nÊµãËØïËÆ¢ÂçïÂàõÂª∫API...');
  const orderData = {
    product_id: productId,
    travel_date: testDate,
    adults: 2,
    children_no_bed: 1,
    children_with_bed: 0,
    infants: 0,
    customer_name: 'ÊúÄÁªà‰øÆÂ§çÊµãËØï',
    customer_phone: '1234567890',
    customer_email: 'final-fix@test.com',
    notes: 'ÊúÄÁªà‰øÆÂ§çÊµãËØï'
  };
  
  console.log('üì§ ÂèëÈÄÅËÆ¢ÂçïÊï∞ÊçÆ:');
  console.log(JSON.stringify(orderData, null, 2));
  
  try {
    const response = await axios.post(`${BASE_URL}/api/orders`, orderData, {
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      timeout: 10000,
      validateStatus: function (status) {
        return status < 500; // ‰∏çË¶ÅÊäõÂá∫400ÈîôËØØÔºåÊàë‰ª¨Ë¶ÅÁúãÂìçÂ∫îÂÜÖÂÆπ
      }
    });
    
    console.log(`\nüì• APIÂìçÂ∫î (Áä∂ÊÄÅÁ†Å: ${response.status}):`);
    console.log(JSON.stringify(response.data, null, 2));
    
    if (response.status === 200) {
      console.log('üéâ ËÆ¢ÂçïÂàõÂª∫ÊàêÂäüÔºÅÁ≥ªÁªü‰øÆÂ§çÊúâÊïàÔºÅ');
    } else {
      console.log('‚ùå ËÆ¢ÂçïÂàõÂª∫‰ªçÁÑ∂Â§±Ë¥•ÔºåÈúÄË¶ÅËøõ‰∏ÄÊ≠•‰øÆÂ§ç');
    }
  } catch (error) {
    console.log('‚ùå ËØ∑Ê±ÇÂ§±Ë¥•:', error.message);
  }
  
  // 4. ÊÄªÁªì‰øÆÂ§çÁªìÊûú
  console.log('\nüîç Á≥ªÁªü‰øÆÂ§çÊÄªÁªì:');
  console.log('1. Â∑≤‰øÆÂ§çÊï∞ÊçÆÂ∫ìÂ≠óÊÆµÂëΩÂêç‰∏ç‰∏ÄËá¥ÈóÆÈ¢ò');
  console.log('2. Â∑≤‰øÆÂ§çËÆ¢Âçï‰∏éÂÆ¢Êà∑ÁöÑÂÖ≥ËÅîÈóÆÈ¢ò');
  console.log('3. Â∑≤‰øÆÂ§çÂêéÁ´ØAPIÊü•ËØ¢ÈÄªËæë');
  console.log('4. Â∑≤È™åËØÅÁ≥ªÁªü‰øÆÂ§çÁªìÊûú');
  
  console.log('\nüöÄ ËØ∑ÈáçÂêØÂêéÁ´ØÊúçÂä°Âô®‰ª•Â∫îÁî®ÊâÄÊúâÊõ¥Êîπ');
}

// ËøêË°å‰øÆÂ§çËÑöÊú¨
fixDatabaseFieldsAndApi().catch(console.error);